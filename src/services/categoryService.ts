import axios from 'axios';
import { Category, CategoryResponse } from '@/interfaces/category';

// Interface cho response t·ª´ API search categories
export interface CategorySearchResponse {
  status: string;
  code: number;
  success: boolean;
  message: string;
  data: {
    total: number;
    items: Category[];
  };
  errors: null | any;
}

/**
 * L·∫•y danh s√°ch categories t·ª´ API
 * @returns Danh s√°ch categories
 */
export async function getCategories(): Promise<Category[]> {
  try {
    const url = 'https://api.sonata.io.vn/api/v1/category';
    
    // G·ª≠i request v·ªõi timeout
    const response = await axios.get<CategoryResponse>(url, {
      timeout: 8000 // Timeout sau 8 gi√¢y
    });
    
    // Ki·ªÉm tra response theo c·∫•u tr√∫c API th·ª±c t·∫ø
    if (response.data && response.data.success && Array.isArray(response.data.data)) {
      return response.data.data.map((category: any) => ({
        id: category.id || '',
        name: category.name || 'Unknown Category',
        picture: category.picture || '/default-category.jpg',
        description: category.description,
        viewCount: category.viewCount || 0,
        totalMusics: category.totalMusics || 0
      }));
    } else {
      console.warn('API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng nh∆∞ mong ƒë·ª£i:', response.data);
      return [];
    }
  } catch (error) {
    // X·ª≠ l√Ω l·ªói chi ti·∫øt
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNABORTED') {
        console.error('Timeout khi k·∫øt n·ªëi ƒë·∫øn API categories:', error.message);
      } else if (error.response) {
        // L·ªói server tr·∫£ v·ªÅ (status code kh√¥ng ph·∫£i 2xx)
        console.error('L·ªói API categories:', error.response.status, error.response.data);
      } else if (error.request) {
        // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
        console.error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ API categories:', error.message);
      }
    } else {
      console.error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y categories:', error);
    }
    return [];
  }
}

/**
 * T√¨m ki·∫øm categories theo t·ª´ kh√≥a - Theo API documentation
 * @param searchTerm T·ª´ kh√≥a t√¨m ki·∫øm
 * @param rpp S·ªë k·∫øt qu·∫£ tr√™n trang (records per page)
 * @param page Trang hi·ªán t·∫°i
 * @returns K·∫øt qu·∫£ t√¨m ki·∫øm categories
 */
export async function searchCategories(
  searchTerm: string, 
  rpp: number = 10, 
  page: number = 1
): Promise<CategorySearchResponse> {
  try {
    const url = `https://api.sonata.io.vn/api/v1/category/search?rpp=${rpp}&page=${page}`;
    
    // Request data theo ƒë√∫ng API documentation
    const requestData = {
      filters: [
        {
          operator: "like",
          key: "name",
          value: searchTerm
        }
      ],
      sorts: [
        {
          key: "viewCount",
          type: "DESC"
        },
        {
          key: "name",
          type: "ASC"
        }
      ]
    };
    
    console.log('üè∑Ô∏è Category Search Request:', {
      url,
      data: requestData,
      searchTerm
    });
    
    const response = await axios.post(url, requestData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 8000
    });
    
    console.log('üè∑Ô∏è Category Search Response:', response.data);
    
    // Parse response theo API documentation format
    if (response.data && response.data.success && response.data.data) {
      const { total, items } = response.data.data;
      
      const mappedItems = (items || []).map((category: any) => ({
        id: category.id || '',
        name: category.name || 'Unknown Category',
        picture: category.picture || '/default-category.jpg',
        description: category.description,
        viewCount: category.viewCount || 0,
        totalMusics: category.totalMusics || 0
      }));
      
      console.log('üè∑Ô∏è Mapped Categories:', mappedItems);
      
      return {
        status: response.data.status,
        code: response.data.code,
        success: response.data.success,
        message: response.data.message,
        data: {
          total: total || 0,
          items: mappedItems
        },
        errors: response.data.errors
      };
    } else {
      console.warn('üè∑Ô∏è API search categories tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng nh∆∞ mong ƒë·ª£i:', response.data);
      return {
        status: "ERROR",
        code: 404,
        success: false,
        message: "No data found",
        data: { total: 0, items: [] },
        errors: null
      };
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t√¨m ki·∫øm categories:', error);
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNABORTED') {
        console.error('‚è∞ Timeout khi t√¨m ki·∫øm categories:', error.message);
      } else if (error.response) {
        console.error('üö´ L·ªói API search categories:', {
          status: error.response.status,
          data: error.response.data,
          url: error.config?.url
        });
      } else if (error.request) {
        console.error('üì° Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ API search categories:', error.message);
      }
    } else {
      console.error('üí• L·ªói kh√¥ng x√°c ƒë·ªãnh khi t√¨m ki·∫øm categories:', error);
    }
    return {
      status: "ERROR",
      code: 500,
      success: false,
      message: "Search failed",
      data: { total: 0, items: [] },
      errors: error
    };
  }
} 