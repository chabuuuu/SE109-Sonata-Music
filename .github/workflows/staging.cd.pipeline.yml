name: "[CD] Sonata frontend"

env:
  IMAGE_NAME: haphuthinh/sonata_frontend:${{ github.ref_name }}-${{ github.sha }}
  FIRST_PORT: 8530
  SECOND_PORT: 8531
  CONTAINER_NAME_WITHOUT_PORT: sonata_frontend

on:
  push:
    branches:
      - release

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build \
          -t $IMAGE_NAME .

      - name: Push Docker image to Docker Hub
        run: docker push $IMAGE_NAME

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server with zero downtime
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            ACTIVE_PORT=$(sudo docker ps --format '{{.Ports}}' | grep -oE '${{ env.FIRST_PORT }}|${{ env.SECOND_PORT }}' | head -n1)

            if [ "$ACTIVE_PORT" = "${{ env.FIRST_PORT }}" ]; then
              NEW_PORT=${{ env.SECOND_PORT }}
            else
              NEW_PORT=${{ env.FIRST_PORT }}
            fi

            echo "Deploying new container on port $NEW_PORT..."

            sudo docker pull ${{ env.IMAGE_NAME }}

            CONTAINER_NAME="${{ env.CONTAINER_NAME_WITHOUT_PORT }}_$NEW_PORT"

            if [ "$(docker ps -aq -f name=^${CONTAINER_NAME}$)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            docker run -d \
              --name ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_$NEW_PORT \
              --cpus="0.5" \
              --memory="600m" \
              -p $NEW_PORT:80 \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:80/ || exit 1" \
              --health-interval=60s \
              --health-retries=3 \
              --health-timeout=20s \
              --memory-reservation="300m" \
              ${{ env.IMAGE_NAME }}

            echo "Waiting for new container to start..."

            for i in {1..30}; do
              if curl -fs http://127.0.0.1:$NEW_PORT/; then
                echo "New container is ready!"
                break
              fi
              echo "Still waiting for container..."
              sleep 2
            done

            if ! curl -fs http://127.0.0.1:$NEW_PORT/; then
              echo "Deployment failed: New container is not responding."
              sudo docker stop ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_$NEW_PORT

              exit 1
            fi

            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            if [ "$ACTIVE_PORT" = "${{ env.FIRST_PORT }}" ]; then
              echo "Stopping old container: ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_${{ env.FIRST_PORT }}"
              sudo docker stop ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_${{ env.FIRST_PORT }}
            else
              echo "Stopping old container: ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_${{ env.SECOND_PORT }}"
              sudo docker stop ${{ env.CONTAINER_NAME_WITHOUT_PORT }}_${{ env.SECOND_PORT }}
            fi

            echo "Deployment complete! New version running on port $NEW_PORT."
